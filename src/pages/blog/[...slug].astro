---
export const prerender = true;
import { type CollectionEntry, getCollection } from "astro:content";
import BlogPost from "../../layouts/BlogPost.astro";
import { model } from "../../lib/gemini";

export async function getStaticPaths() {
  const posts = await getCollection("blog");
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: post,
  }));
}

type Props = CollectionEntry<"blog">;

const post = Astro.props;
const { Content } = await post.render();
const blogContent = await Content.toString();
const prompt = `You are an expert doctor. Please take the following content into account: ${blogContent}`;
console.log(prompt);
const result = await model.generateContent(prompt);
const response = await result.response;
const text = await response.text();
---

<BlogPost {...post.data}>
  <div id="blogContent">
    <Content />
  </div>
  <!-- Chatbox -->
  <div class="chatbox mt-[50px]">
    <h1>Ask Your Doubts!</h1>
    <form id="chatForm" data-initial-response={text}>
      <input
        type="text"
        id="chatInput"
        placeholder="Ask a question..."
        required
        class="w-full rounded-[8px] p-2"
      />
      <button
        type="submit"
        class="bg-pink-500 text-white px-4 py-2 rounded-[8px] transition-all hover:border-pink-700 hover:border-2"
      >
        Send
      </button>
    </form>
    <div id="chatOutput"></div>
  </div>
</BlogPost>

<script>
  const chatForm = document.getElementById("chatForm");
  const chatInput = document.getElementById("chatInput");
  const chatOutput = document.getElementById("chatOutput");
  const blogContent = document.getElementById("blogContent");

  chatForm.addEventListener("submit", async (e) => {
    e.preventDefault();
    const question = chatInput.value.trim();
    if (question) {
      chatOutput.innerHTML += `<div class="question">You: ${question}</div>`;
      chatInput.value = "";
      const content = blogContent.innerText;
      const prompt = `Question: ${question}`;

      const response = await fetch("/api/gemini", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ prompt, blogContent: content }),
      });

      if (response.ok) {
        const answer = await response.text();
        chatOutput.innerHTML += `<div class="answer">Claude: ${answer}</div>`;
      } else {
        chatOutput.innerHTML += `<div class="error">Error: ${response.status} ${response.statusText}</div>`;
      }
    }
  });
</script>

<style>
  .chatbox {
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  form {
    display: flex;
    gap: 1rem;
    width: 100%;
    max-width: 600px;
  }

  #chatOutput {
    margin-top: 1rem;
    width: 100%;
    max-width: 600px;
    border: 1px solid #ccc;
    padding: 1rem;
    border-radius: 8px;
    background-color: #f9f9f9;
  }

  #chatInput {
    flex-grow: 1;
  }

  button {
    border: none;
    cursor: pointer;
    border: 2px solid #f9f9f9;
    color: white;
  }

  button:hover {
    color: red;
    background: white;
  }
</style>
